{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport * as os from 'os';\r\nimport * as Mocha from 'mocha';\r\nimport * as iLibInstrument from 'istanbul-lib-instrument';\r\nimport * as iLibCoverage from 'istanbul-lib-coverage';\r\nimport * as iLibReport from 'istanbul-lib-report';\r\nimport * as iReports from 'istanbul-reports';\r\nimport * as iLibHook from 'istanbul-lib-hook';\r\nimport * as iLibSourceMaps from 'istanbul-lib-source-maps';\r\nimport * as glob from 'glob';\r\nimport decache from 'decache';\r\n\r\nlet mocha = new Mocha({\r\n    ui: 'tdd',\r\n    useColors: true\r\n});\r\n\r\nlet testOptions: ITestCoverOptions;\r\n\r\nexport function configure(mochaOpts: Mocha.MochaOptions, testOpts: ITestCoverOptions): void {\r\n    mocha = new Mocha(mochaOpts);\r\n    testOptions = testOpts;\r\n}\r\n\r\nfunction mkDirIfExists(dir: string): void {\r\n    if (!fs.existsSync(dir)) {\r\n        fs.mkdirSync(dir);\r\n    }\r\n}\r\n\r\nclass CoverageRunner {\r\n    private coverageVar: string = '$$cov_' + new Date().getTime() + '$$';\r\n    private transformer: iLibHook.Transformer;\r\n    private unhookRequire: () => void;\r\n    private matchFn: any;\r\n    private instrumenter: iLibInstrument.Instrumenter;\r\n\r\n    constructor(private options: ITestRunnerOptions, private testsRoot: string, endRunCallback: any) {\r\n        if (!options.relativeSourcePath) {\r\n            return endRunCallback('Error - relativeSourcePath must be defined for code coverage to work');\r\n        }\r\n\r\n    }\r\n\r\n    public setupCoverage(): void {\r\n        // Set up Code Coverage, hooking require so that instrumented code is returned\r\n        this.instrumenter = iLibInstrument.createInstrumenter({ coverageVariable: this.coverageVar });\r\n        let sourceRoot = path.join(this.testsRoot, this.options.relativeSourcePath);\r\n\r\n        // Glob source files\r\n        let srcFiles = glob.sync('**/**.js', {\r\n            ignore: this.options.ignorePatterns,\r\n            cwd: sourceRoot\r\n        });\r\n\r\n        // Create a match function - taken from the run-with-cover.js in istanbul.\r\n        let fileMap = {};\r\n        srcFiles.forEach(file => {\r\n            let fullPath = path.join(sourceRoot, file);\r\n            // Windows paths are (normally) case insensitive so convert to lower case\r\n            // since sometimes the paths returned by the glob and the require hooks\r\n            // are different casings.\r\n            if (os.platform() === 'win32') {\r\n                fullPath = fullPath.toLocaleLowerCase();\r\n            }\r\n            fileMap[fullPath] = true;\r\n\r\n            // On Windows, extension is loaded pre-test hooks and this mean we lose\r\n            // our chance to hook the Require call. In order to instrument the code\r\n            // we have to decache the JS file so on next load it gets instrumented.\r\n            // This doesn't impact tests, but is a concern if we had some integration\r\n            // tests that relied on VSCode accessing our module since there could be\r\n            // some shared global state that we lose.\r\n            decache(fullPath);\r\n        });\r\n\r\n        this.matchFn = function (file: string): boolean {\r\n            // Windows paths are (normally) case insensitive so convert to lower case\r\n            // since sometimes the paths returned by the glob and the require hooks\r\n            // are different casings.\r\n            if (os.platform() === 'win32') {\r\n                file = file.toLocaleLowerCase();\r\n            }\r\n            return fileMap[file];\r\n        };\r\n        this.matchFn.files = Object.keys(fileMap);\r\n\r\n        // Hook up to the Require function so that when this is called, if any of our source files\r\n        // are required, the instrumented version is pulled in instead. These instrumented versions\r\n        // write to a global coverage variable with hit counts whenever they are accessed\r\n        this.transformer = (code: string, options: iLibHook.TransformerOptions): string => {\r\n            // Try to find a .map file\r\n            let map = undefined;\r\n            try {\r\n                map = JSON.parse(fs.readFileSync(`${options.filename}.map`).toString());\r\n            } catch (err) {\r\n                // missing source map...\r\n            }\r\n            return this.instrumenter.instrumentSync(code, options.filename, map);\r\n        }\r\n        let hookOpts = { verbose: false, extensions: ['.js'] };\r\n        this.unhookRequire = iLibHook.hookRequire(this.matchFn, this.transformer, hookOpts);\r\n        // initialize the global variable to stop mocha from complaining about leaks\r\n        global[this.coverageVar] = {};\r\n\r\n        // Hook the process exit event to handle reporting\r\n        process.on('exit', () => {\r\n            this.reportCoverage();\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Writes a coverage report. Note that as this is called in the process exit callback, all calls must be synchronous.\r\n     *\r\n     * @returns {void}\r\n     *\r\n     * @memberOf CoverageRunner\r\n     */\r\n    public reportCoverage(): void {\r\n        this.unhookRequire();\r\n        let cov: any;\r\n        if (typeof global[this.coverageVar] === 'undefined' || Object.keys(global[this.coverageVar]).length === 0) {\r\n            console.error('No coverage information was collected, exit without writing coverage information');\r\n            return;\r\n        } else {\r\n            cov = global[this.coverageVar];\r\n        }\r\n\r\n        // TODO consider putting this under a conditional flag\r\n        // Files that are not touched by code ran by the test runner is manually instrumented, to\r\n        // illustrate the missing coverage.\r\n        this.matchFn.files.forEach(file => {\r\n            if (!cov[file]) {\r\n                this.transformer(fs.readFileSync(file, 'utf-8'), { filename: file });\r\n\r\n                // When instrumenting the code, istanbul will give each FunctionDeclaration a value of 1 in coverState.s,\r\n                // presumably to compensate for function hoisting. We need to reset this, as the function was not hoisted,\r\n                // as it was never loaded.\r\n                Object.keys(this.instrumenter.fileCoverage.s).forEach(key => {\r\n                    this.instrumenter.fileCoverage.s[key] = 0;\r\n                });\r\n\r\n                cov[file] = this.instrumenter.fileCoverage;\r\n            }\r\n        });\r\n\r\n        // Convert the report to the mapped source files\r\n        const mapStore = iLibSourceMaps.createSourceMapStore();\r\n        const coverageMap = mapStore.transformCoverage(iLibCoverage.createCoverageMap(global[this.coverageVar])).map;\r\n\r\n        // TODO Allow config of reporting directory with\r\n        let reportingDir = path.join(this.testsRoot, this.options.relativeCoverageDir);\r\n        let includePid = this.options.includePid;\r\n        let pidExt = includePid ? ('-' + process.pid) : '',\r\n            coverageFile = path.resolve(reportingDir, 'coverage' + pidExt + '.json');\r\n\r\n        mkDirIfExists(reportingDir); // yes, do this again since some test runners could clean the dir initially created\r\n\r\n        fs.writeFileSync(coverageFile, JSON.stringify(cov), 'utf8');\r\n\r\n        const context = iLibReport.createContext({\r\n            dir: reportingDir,\r\n            coverageMap: coverageMap\r\n        });\r\n\r\n        const tree = context.getTree('flat');\r\n\r\n        const reportTypes = (this.options.reports instanceof Array) ? this.options.reports : ['lcovonly'];\r\n        // Cast to any since create only takes specific values but we don't know what the user passed in.\r\n        // We'll let the lib error out if an invalid value is passed in.\r\n        reportTypes.forEach(reportType => tree.visit(iReports.create(<any>reportType), context));\r\n    }\r\n}\r\n\r\nfunction readCoverOptions(testsRoot: string): ITestRunnerOptions {\r\n    let coverConfigPath = path.join(testsRoot, testOptions.coverConfig);\r\n    let coverConfig: ITestRunnerOptions = undefined;\r\n    if (fs.existsSync(coverConfigPath)) {\r\n        let configContent = fs.readFileSync(coverConfigPath).toString();\r\n        coverConfig = JSON.parse(configContent);\r\n    }\r\n    return coverConfig;\r\n}\r\n\r\nexport function run(testsRoot: string, clb): any {\r\n    // Read configuration for the coverage file\r\n    let coverOptions: ITestRunnerOptions = readCoverOptions(testsRoot);\r\n    if (coverOptions && coverOptions.enabled) {\r\n        // Setup coverage pre-test, including post-test hook to report\r\n        let coverageRunner = new CoverageRunner(coverOptions, testsRoot, clb);\r\n        coverageRunner.setupCoverage();\r\n    }\r\n\r\n    // Glob test files\r\n    glob('**/**.test.js', { cwd: testsRoot }, function (error, files): any {\r\n        if (error) {\r\n            return clb(error);\r\n        }\r\n        try {\r\n            // Fill into Mocha\r\n            files.forEach(function (f): Mocha {\r\n                return mocha.addFile(path.join(testsRoot, f));\r\n            });\r\n            // Run the tests\r\n\r\n            mocha.run((failureCount) => {\r\n                clb(undefined, failureCount);\r\n            });\r\n\r\n        } catch (error) {\r\n            return clb(error);\r\n        }\r\n    });\r\n}\r\n\r\nexport interface ITestCoverOptions {\r\n    /**\r\n     * Relative path to the coverage config file with configuration\r\n     * options for the test runner options.\r\n     */\r\n    coverConfig: string;\r\n}\r\n\r\ninterface ITestRunnerOptions {\r\n    enabled?: boolean;\r\n    relativeCoverageDir: string;\r\n    relativeSourcePath: string;\r\n    ignorePatterns: string[];\r\n    includePid?: boolean;\r\n    reports?: string[];\r\n    verbose?: boolean;\r\n}\r\n"],"sourceRoot":"C:\\src\\vscodetestcover/src"}