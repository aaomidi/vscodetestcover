{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/* --------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License. See License.txt in the project root for license information.\r\n * ------------------------------------------------------------------------------------------ */\r\n\r\n'use strict';\r\nimport * as vscode from 'vscode';\r\nimport paths = require('path');\r\nconst fs = require('fs');\r\nimport Mocha = require('mocha');\r\nimport istanbul = require('istanbul');\r\n\r\nlet glob = require('glob');\r\nlet remapIstanbul = require('remap-istanbul');\r\n\r\n// Linux: prevent a weird NPE when mocha on Linux requires the window size from the TTY\r\n// Since we are not running in a tty environment, we just implement the method statically\r\nlet tty = require('tty');\r\nif (!tty.getWindowSize) {\r\n    tty.getWindowSize = function (): number[] { return [80, 75]; };\r\n}\r\n\r\nlet mocha = new Mocha({\r\n    ui: 'tdd',\r\n    useColors: true\r\n});\r\n\r\nlet testOptions = undefined;\r\n\r\nfunction configure(mochaOpts, testOpts): void {\r\n    mocha = new Mocha(mochaOpts);\r\n    testOptions = testOpts;\r\n}\r\nexports.configure = configure;\r\n\r\nfunction mkDirIfExists(dir: string): void {\r\n    if (!fs.existsSync(dir)) {\r\n        fs.mkdirSync(dir);\r\n    }\r\n}\r\n\r\nclass CoverageRunner {\r\n    private coverageVar: string = '$$cov_' + new Date().getTime() + '$$';\r\n    private transformer: any = undefined;\r\n    private matchFn: any = undefined;\r\n    private instrumenter: any = undefined;\r\n\r\n    constructor(private options: ITestRunnerOptions, private testsRoot: string, endRunCallback: any) {\r\n        if (!options.relativeSourcePath) {\r\n            return endRunCallback('Error - relativeSourcePath must be defined for code coverage to work');\r\n        }\r\n\r\n    }\r\n\r\n    public setupCoverage(): void {\r\n        // Set up Code Coverage, hooking require so that instrumented code is returned\r\n        let self = this;\r\n        self.instrumenter = new istanbul.Instrumenter({ coverageVariable: self.coverageVar });\r\n        let sourceRoot = paths.join(self.testsRoot, self.options.relativeSourcePath);\r\n\r\n        // Glob source files\r\n        let srcFiles = glob.sync('**/**.js', {\r\n            ignore: self.options.ignorePatterns,\r\n            cwd: sourceRoot\r\n        });\r\n\r\n        // Create a match function - taken from the run-with-cover.js in istanbul.\r\n        let decache = require('decache');\r\n        let fileMap = {};\r\n        srcFiles.forEach(file => {\r\n            let fullPath = paths.join(sourceRoot, file);\r\n            fileMap[fullPath] = true;\r\n\r\n            // On Windows, extension is loaded pre-test hooks and this mean we lose\r\n            // our chance to hook the Require call. In order to instrument the code\r\n            // we have to decache the JS file so on next load it gets instrumented.\r\n            // This doesn't impact tests, but is a concern if we had some integration\r\n            // tests that relied on VSCode accessing our module since there could be\r\n            // some shared global state that we lose.\r\n            decache(fullPath);\r\n        });\r\n\r\n        self.matchFn = function (file): boolean { return fileMap[file]; };\r\n        self.matchFn.files = Object.keys(fileMap);\r\n\r\n        // Hook up to the Require function so that when this is called, if any of our source files\r\n        // are required, the instrumented version is pulled in instead. These instrumented versions\r\n        // write to a global coverage variable with hit counts whenever they are accessed\r\n        self.transformer = self.instrumenter.instrumentSync.bind(self.instrumenter);\r\n        let hookOpts = { verbose: false, extensions: ['.js'] };\r\n        istanbul.hook.hookRequire(self.matchFn, self.transformer, hookOpts);\r\n\r\n        // initialize the global variable to stop mocha from complaining about leaks\r\n        global[self.coverageVar] = {};\r\n\r\n        // Hook the process exit event to handle reporting\r\n        // Only report coverage if the process is exiting successfully\r\n        process.on('exit', (code) => {\r\n            self.reportCoverage();\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Writes a coverage report. Note that as this is called in the process exit callback, all calls must be synchronous.\r\n     *\r\n     * @returns {void}\r\n     *\r\n     * @memberOf CoverageRunner\r\n     */\r\n    public reportCoverage(): void {\r\n        let self = this;\r\n        istanbul.hook.unhookRequire();\r\n        let cov: any;\r\n        if (typeof global[self.coverageVar] === 'undefined' || Object.keys(global[self.coverageVar]).length === 0) {\r\n            console.error('No coverage information was collected, exit without writing coverage information');\r\n            return;\r\n        } else {\r\n            cov = global[self.coverageVar];\r\n        }\r\n\r\n        // TODO consider putting this under a conditional flag\r\n        // Files that are not touched by code ran by the test runner is manually instrumented, to\r\n        // illustrate the missing coverage.\r\n        self.matchFn.files.forEach(file => {\r\n            if (!cov[file]) {\r\n                self.transformer(fs.readFileSync(file, 'utf-8'), file);\r\n\r\n                // When instrumenting the code, istanbul will give each FunctionDeclaration a value of 1 in coverState.s,\r\n                // presumably to compensate for function hoisting. We need to reset this, as the function was not hoisted,\r\n                // as it was never loaded.\r\n                Object.keys(self.instrumenter.coverState.s).forEach(key => {\r\n                    self.instrumenter.coverState.s[key] = 0;\r\n                });\r\n\r\n                cov[file] = self.instrumenter.coverState;\r\n            }\r\n        });\r\n\r\n        // TODO Allow config of reporting directory with\r\n        let reportingDir = paths.join(self.testsRoot, self.options.relativeCoverageDir);\r\n        let includePid = self.options.includePid;\r\n        let pidExt = includePid ? ('-' + process.pid) : '',\r\n            coverageFile = paths.resolve(reportingDir, 'coverage' + pidExt + '.json');\r\n\r\n        mkDirIfExists(reportingDir); // yes, do this again since some test runners could clean the dir initially created\r\n\r\n        fs.writeFileSync(coverageFile, JSON.stringify(cov), 'utf8');\r\n\r\n        let remappedCollector: istanbul.Collector = remapIstanbul.remap(cov, {\r\n            warn: warning => {\r\n                // We expect some warnings as any JS file without a typescript mapping will cause this.\r\n                // By default, we'll skip printing these to the console as it clutters it up\r\n                if (self.options.verbose) {\r\n                    console.warn(warning);\r\n                }\r\n            }\r\n        });\r\n\r\n        let reporter = new istanbul.Reporter(undefined, reportingDir);\r\n        let reportTypes = (self.options.reports instanceof Array) ? self.options.reports : ['lcov'];\r\n        reporter.addAll(reportTypes);\r\n        reporter.write(remappedCollector, true, () => {\r\n            console.log(`reports written to ${reportingDir}`);\r\n        });\r\n    }\r\n}\r\n\r\nfunction readCoverOptions(testsRoot: string): ITestRunnerOptions {\r\n    let coverConfigPath = paths.join(testsRoot, testOptions.coverConfig);\r\n    let coverConfig: ITestRunnerOptions = undefined;\r\n    if (fs.existsSync(coverConfigPath)) {\r\n        let configContent = fs.readFileSync(coverConfigPath);\r\n        coverConfig = JSON.parse(configContent);\r\n    }\r\n    return coverConfig;\r\n}\r\n\r\nfunction run(testsRoot, clb): any {\r\n    // Enable source map support\r\n    require('source-map-support').install();\r\n\r\n    // Read configuration for the coverage file\r\n    let coverOptions: ITestRunnerOptions = readCoverOptions(testsRoot);\r\n    if (coverOptions && coverOptions.enabled) {\r\n        // Setup coverage pre-test, including post-test hook to report\r\n        let coverageRunner = new CoverageRunner(coverOptions, testsRoot, clb);\r\n        coverageRunner.setupCoverage();\r\n    }\r\n\r\n    // Glob test files\r\n    glob('**/**.test.js', { cwd: testsRoot }, function (error, files): any {\r\n        if (error) {\r\n            return clb(error);\r\n        }\r\n        try {\r\n            // Fill into Mocha\r\n            files.forEach(function (f): Mocha {\r\n                return mocha.addFile(paths.join(testsRoot, f));\r\n            });\r\n            // Run the tests\r\n            let failureCount = 0;\r\n\r\n            mocha.run()\r\n                .on('fail', function (test, err): void {\r\n                    failureCount++;\r\n                })\r\n                .on('end', function (): void {\r\n                    clb(undefined, failureCount);\r\n                });\r\n        } catch (error) {\r\n            return clb(error);\r\n        }\r\n    });\r\n}\r\nexports.run = run;\r\n\r\ninterface ITestRunnerOptions {\r\n    enabled?: boolean;\r\n    relativeCoverageDir: string;\r\n    relativeSourcePath: string;\r\n    ignorePatterns: string[];\r\n    includePid?: boolean;\r\n    reports?: string[];\r\n    verbose?: boolean;\r\n}"],"sourceRoot":"C:\\Users\\Cory\\Source\\vscodetestcover/src"}